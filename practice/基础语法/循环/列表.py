# 列表:一种数据结构。它可以写作中括号之间的一列逗号分隔的值。列表的元素不必是同一类型：
# 我感觉有点像数组,而且里面封装了很多方法,还可以放不同的类型
a = [1, 2.3, "dada", 'da']
print(a)
print(a[1])
print(a.__len__())

# 如果我们使用负数的索引，那将会从列表的末尾开始计数，像下面这样：
print(a[-1])

# 切片   你甚至可以把它切成不同的部分，这个操作称为切片
print(a[0:-1])  # 前闭后开区间
# 切片并不会改变正在操作的列表，切片操作返回其子列表，这意味着下面的切片操作返回列表一个新的（浅）拷贝副本：
print(a[:])
# 切片的索引有非常有用的默认值；省略的第一个索引默认为零，省略的第二个索引默认为切片的字符串的大小：
print(a[:2])
print(a[0:])
# Python 能够优雅地处理那些没有意义的切片索引：一个过大的索引值(即大于列表实际长度)将被列表实际长度所代替，当上边界比下边界大时(即切片左值大于右值)就返回空列表:
print(a[:32])
print(a[32:])
# 切片操作还可以设置步长，就像下面这样：它的意思是，从切片索引 1 到列表末尾，每隔3个元素取值。
print(a[0::3])

# 列表还允许加列表的操作
a += [12, 234, 43, 14]
print(a)

# 修改列表元素'
a[3] = 45
print(a)

# 也可以对切片赋值，此操作可以改变列表的尺寸，或清空它：
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
# 修改2-4
letters[2:5] = ['C', 'D', 'E']
print(letters)
# 移除2-4
letters[2:5] = []
print(letters)
# 清空列表
letters[:] = []
print(letters)

# 检查某个值是否在列表中
print('c' in letters)

# 检查列表是否为空
letters = [1, 24, 23432, 42, 3]
if letters:
    print("非空")
else:
    print("空")

# 列表是允许嵌套的
b = [1, 2, 3]
c = [4, 5, 6]
d = [b, c, 13]
print(d)

# 列表越界IndexError: list index out of range
# print(a[7])
